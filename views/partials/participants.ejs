<section
  id="participantStatus"
  class="hidden border rounded shadow-sm p-4 mx-auto"
>
  <div id="containerParticipants">
    <h4>Who's here?</h4>
  </div>
</section>

<script>
  //function that updates list of participants. The list is stored in sever side and passed as a message via socket depending on the event (new user joined, user left, users waiting to enter the room, user voted, user to vote)
  function updateParticipants(receivedParticipants) {
    document.getElementById('participantStatus').classList.remove('hidden');
    let container = document.getElementById('containerParticipants');
    container.innerHTML = `<h4>Who's here?</h4>`;

    // A map of all possible status for ease in editing and adding new statuses
    const statusMap = {
      waiting: { emoji: '🍕', class: 'waiting' },
      unvoted: { emoji: '❔', class: 'unvoted' },
      voted: { emoji: '✅', class: 'voted' },
      passing: { emoji: '👁️', class: 'passing' },
      default: { emoji: '❔', class: 'unvoted' }
    };

    //creating html that depending on the status of the user, different icons will be displayed.
    container.innerHTML += receivedParticipants
      .map(([name, status]) => {
        const { emoji, class: statusClass } = statusMap[status] || statusMap.default;
        const html = `<p class='${name.replace(/ /g, '')} ${statusClass}''>${changeEmoji(statusClass)}<p>`;
        return `<div class='user'>
    <img src="/images/site/user.png" alt="user-icon" />
    <p>${name}</p>
    ${html}
  </div>`;
      })
      .join('');
  }

  function changeEmoji(status) {
    // This takes in the status name as the input and outputs the proper emoji
    // to go with it

    // An emoji map for available voting options
    const emojiMap = {
      "1" : "1️⃣", "2" : "2️⃣", "3" : "3️⃣", "5" : "5️⃣", "8" : "8️⃣", "13": "1️⃣3️⃣", null : "❔",
      "0" : "0️⃣", "1/2" : "1️⃣↙️2️⃣", "XXS" : "", "XS" : "", "S" : "", "M" : "", "L" : "", "XL" : "XXL",
      "4" : "4️⃣", "16" : "1️⃣6️⃣", "32" : "3️⃣2️⃣", "64" : "6️⃣4️⃣", "waiting" : "🍕", 
      "unvoted" : "❔", "voted" : "✅", "passing" : "👁️", "default" : "❔"
    }

    return emojiMap[status];
  }

  //function to change user status. Not currently used as controlled at server side
  function updateVoteStatus(displayName, remove) {
    const voteIcon = document.querySelectorAll(
      `.${displayName.replace(/ /g, '')}`
    );
    voteIcon.forEach((p) => {
      if (remove) {
        if (p.classList.contains('unvoted')) {
          p.classList.remove('hidden');
        } else {
          p.classList.add('hidden');
        }
      } else {
        if (!p.classList.contains('unvoted')) {
          p.classList.remove('hidden');
        } else {
          p.classList.add('hidden');
        }
      }
    });
  }

  //function to change user status. Not currently used as controlled at server side
  function resetVoteStatus() {
    const voteIcon1 = document.querySelectorAll('.unvoted');
    const voteIcon2 = document.querySelectorAll('.voted');
    voteIcon1.forEach((p) => {
      p.classList.remove('hidden');
    });
    voteIcon2.forEach((p) => {
      p.classList.add('hidden');
    });
  }
</script>
