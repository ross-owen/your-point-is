<section id="voted-section" class="hidden">
    <h2>All votes are in for an average of: <span id="average-vote"></span></h2>
    <div class="row row-cols-1 row-cols-md-3 g-4">
        <% for (let i = 0; i < cardDeck.length; i++) { %>
            <div id="voted-card-<%= cardDeck[i] %>" class="col voted-card-wrapper hidden">
                <div class="voted-card">
                    <div class="voted-card-body">
                        <h2 class="voted-card-title"><%= cardDeck[i] %></h2>
                    </div>
                </div>
                <div id="voted-card-summary-<%= cardDeck[i] %>" class="vote-count"></div>
            </div>
        <% } %>
    </div>

    <% if (isOwner) { %>
        <div class="owner-button">
            <button id="new-round-button" class="btn btn-secondary btn-lg mt-4">Start a New Round</button>
        </div>
    <% } %>
</section>

<script>
  const newRoundButton = document.getElementById('new-round-button');
  if (newRoundButton) {
    newRoundButton.addEventListener("click", () => {
      newRound();
    });
  }

  function showVoted(votes) {

    resetVotedCards();

    countCards(votes);

    const section = document.getElementById("voted-section");
    if (section) {
      section.classList.remove("hidden");
    }
  }

  function hideVoted() {
    resetVotedCards();

    const section = document.getElementById("voted-section");
    if (section) {
      section.classList.add("hidden");
    }
  }

  function resetVotedCards() {
    const voteCounts = document.querySelectorAll(".vote-count");
    voteCounts.forEach(element => {
      element.innerHTML = "";
    });
    const cards = document.querySelectorAll(".voted-card-wrapper");
    cards.forEach(element => {
      element.classList.add("hidden");
    });
    document.getElementById("average-vote").innerHTML = "";
  }

  function countCards(voteCounts) {
    const cardVoteSummary = {};

    voteCounts.forEach(vote => {
      if (!cardVoteSummary[vote.card]) {
        cardVoteSummary[vote.card] = {
          count: 0,
          names: [],
        };
      }

      cardVoteSummary[vote.card].count++;
      cardVoteSummary[vote.card].names.push(vote.name);
    });

    let sum = 0;
    let voterCount = 0;

    for (const card in cardVoteSummary) {
      if (cardVoteSummary.hasOwnProperty(card)) {
        const summary = cardVoteSummary[card];

        const cardId = `voted-card-${card}`;
        document.getElementById(cardId).classList.remove("hidden");

        const cardVoteId = `voted-card-summary-${card}`;
        const voteSummary = document.getElementById(cardVoteId);

        const namesString = summary.names.join(', ');

        voteSummary.innerHTML = `
            Total Votes: ${summary.count}<br>
            By: ${namesString}
          `;

        if (!isNaN(card)) {
          sum += (Number(card) * summary.count);
          voterCount += summary.count;
        }
      }
    }

    document.getElementById("average-vote").innerHTML = `${(sum / voterCount)}`;
  }

  function newRound() {
    hideVoted();
    console.log('submitting socket.io for a new round');
    getSocket().emit("new_round", roomCode);
  }
</script>