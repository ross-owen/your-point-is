<section id="voted-section" class="hidden">
    <h2 id="votedMessage">All votes are in for an average of: <span id="average-vote"></span></h2>

    <div id="pieChart">
        <canvas id="myChart"></canvas>

    </div>

    <!-- Accessing chart.js via cdn for ease and lack of installation -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>

    <% if (isOwner) { %>
        <div class="owner-button">
            <button id="new-round-button" class="btn btn-secondary btn-lg mt-4">Start a New Round</button>
        </div>
    <% } %>
</section>

<script>

  const newRoundButton = document.getElementById('new-round-button');
  if (newRoundButton) {
    newRoundButton.addEventListener("click", () => {
      newRound();
    });
  }

  function showVoted(votes) {

    resetVotedCards();

    countCards(votes);

    const section = document.getElementById("voted-section");
    if (section) {
      section.classList.remove("hidden");
    }
  }

  function hideVoted() {
    resetVotedCards();

    const section = document.getElementById("voted-section");
    if (section) {
      section.classList.add("hidden");
    }
  }

  function resetVotedCards() {
    const voteCounts = document.querySelectorAll(".vote-count");
    voteCounts.forEach(element => {
      element.innerHTML = "";
    });
    const cards = document.querySelectorAll(".voted-card-wrapper");
    cards.forEach(element => {
      element.classList.add("hidden");
    });
    document.getElementById("average-vote").innerHTML = "";
  }

  // define myChart as global for global access to delete
  let myChart;


  function countCards(voteCounts) {
    const cardVoteSummary = {};

    voteCounts.forEach(vote => {
      if (!cardVoteSummary[vote.card]) {
        cardVoteSummary[vote.card] = {
          count: 0,
          names: [],
        };
      }

      cardVoteSummary[vote.card].count++;
      cardVoteSummary[vote.card].names.push(vote.name);
    });

    // Call the createChart function to display the Pie Chart
    createChart(cardVoteSummary);

    let sum = 0;
    let voterCount = 0;

    for (const card in cardVoteSummary) {
      if (cardVoteSummary.hasOwnProperty(card)) {
        const summary = cardVoteSummary[card];


        if (!isNaN(card)) {
          sum += (Number(card) * summary.count);
          voterCount += summary.count;
        }
      }
    }

    document.getElementById("average-vote").innerHTML = `${(sum / voterCount).toFixed(2)}`;
  }

  function newRound() {
    hideVoted();
    getSocket().emit("new_round", roomCode);
  }

  // Chart as global variable
  const ctx = document.getElementById('myChart');


  function createChart(data) {

    // Takes in the data in the form of an object with arrays, each having
    // the cardName, number of votes for that card, and names of the voters

    // The function then deletes any existing charts, inputs the data appropriately,
    // and creates a new chart

    if (myChart !== undefined) {
      myChart.destroy();
    }

// Create the empty list for ease of inserting data
    let labelList = [];
    let cardCount = [];
    let voterNames = [];

    for (const item in data) {
      if (data.hasOwnProperty(item)) {
        let card = data[item];
        if (item !== "?") {
          labelList.push(item);
          cardCount.push(card.count);
          voterNames.push(card.names.join(", "));
        }
      }
    }

// Creates the new chart
    Chart.register(ChartDataLabels);

    myChart = new Chart(ctx, {
      type: 'pie',
      data: {
        labels: labelList,
        datasets: [{
          label: '# of Votes',
          data: cardCount,
          descriptions: voterNames,
          borderWidth: 3
        }]
      },
      options: {
        plugins: {
          datalabels: {
            align: 'center',
            color: '#fff',
            font: {
              weight: 'bold',
              size: 72
            },
            formatter: function (value, context) {
              return context.chart.data.labels[context.dataIndex];
            }
          },
          tooltip: {
            displayColors: false,
            titleFont: {
              size: 12
            },
            bodyFont: {
              size: 18
            },
            callbacks: {
              title: (context) => {
                return `${context[0].formattedValue} vote(s)`;
              },
              label: function (context) {
                return context.dataset.descriptions[context.dataIndex];
              }
            }
          }
        }
      }
    });
  }
</script>